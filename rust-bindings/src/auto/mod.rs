// This file was generated by gir (https://github.com/gtk-rs/gir)
// from gir-files
// DO NOT EDIT

mod async_progress;
pub use self::async_progress::AsyncProgress;

mod blob_reader;
pub use self::blob_reader::BlobReader;

mod bootconfig_parser;
pub use self::bootconfig_parser::BootconfigParser;

mod content_writer;
pub use self::content_writer::ContentWriter;

mod deployment;
pub use self::deployment::Deployment;

mod gpg_verify_result;
pub use self::gpg_verify_result::GpgVerifyResult;

mod mutable_tree;
pub use self::mutable_tree::MutableTree;

mod repo;
pub use self::repo::Repo;

mod repo_file;
pub use self::repo_file::RepoFile;

mod repo_finder;
pub use self::repo_finder::RepoFinder;

mod repo_finder_avahi;
pub use self::repo_finder_avahi::RepoFinderAvahi;

mod repo_finder_config;
pub use self::repo_finder_config::RepoFinderConfig;

mod repo_finder_mount;
pub use self::repo_finder_mount::RepoFinderMount;

mod repo_finder_override;
pub use self::repo_finder_override::RepoFinderOverride;

mod se_policy;
pub use self::se_policy::SePolicy;

mod sign;
pub use self::sign::Sign;

mod sysroot;
pub use self::sysroot::Sysroot;

mod sysroot_upgrader;
pub use self::sysroot_upgrader::SysrootUpgrader;

#[cfg(feature = "v2018_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2018_6")))]
mod collection_ref;
#[cfg(feature = "v2018_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2018_6")))]
pub use self::collection_ref::CollectionRef;

#[cfg(feature = "v2020_1")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2020_1")))]
mod commit_sizes_entry;
#[cfg(feature = "v2020_1")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2020_1")))]
pub use self::commit_sizes_entry::CommitSizesEntry;

mod diff_item;
pub use self::diff_item::DiffItem;

#[cfg(feature = "v2018_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2018_6")))]
mod remote;
#[cfg(feature = "v2018_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2018_6")))]
pub use self::remote::Remote;

mod repo_commit_modifier;
pub use self::repo_commit_modifier::RepoCommitModifier;

mod repo_dev_ino_cache;
pub use self::repo_dev_ino_cache::RepoDevInoCache;

#[cfg(feature = "v2018_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2018_6")))]
mod repo_finder_result;
#[cfg(feature = "v2018_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2018_6")))]
pub use self::repo_finder_result::RepoFinderResult;

mod enums;
pub use self::enums::DeploymentUnlockedState;
pub use self::enums::GpgSignatureAttr;
pub use self::enums::ObjectType;
#[cfg(feature = "v2018_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2018_2")))]
pub use self::enums::RepoCheckoutFilterResult;
pub use self::enums::RepoCheckoutMode;
pub use self::enums::RepoCheckoutOverwriteMode;
pub use self::enums::RepoCommitFilterResult;
pub use self::enums::RepoCommitIterResult;
pub use self::enums::RepoMode;
pub use self::enums::RepoRemoteChange;
pub use self::enums::StaticDeltaGenerateOpt;

mod flags;
#[cfg(feature = "v2017_13")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2017_13")))]
pub use self::flags::ChecksumFlags;
pub use self::flags::DiffFlags;
pub use self::flags::GpgSignatureFormatFlags;
pub use self::flags::RepoCommitModifierFlags;
#[cfg(feature = "v2015_7")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2015_7")))]
pub use self::flags::RepoCommitState;
pub use self::flags::RepoCommitTraverseFlags;
pub use self::flags::RepoListObjectsFlags;
pub use self::flags::RepoListRefsExtFlags;
pub use self::flags::RepoPruneFlags;
pub use self::flags::RepoPullFlags;
pub use self::flags::RepoResolveRevExtFlags;
#[cfg(feature = "v2021_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2021_4")))]
pub use self::flags::RepoVerifyFlags;
pub use self::flags::SePolicyRestoreconFlags;
pub use self::flags::SysrootSimpleWriteDeploymentFlags;
pub use self::flags::SysrootUpgraderFlags;
pub use self::flags::SysrootUpgraderPullFlags;

pub(crate) mod functions;

mod constants;
pub use self::constants::COMMIT_GVARIANT_STRING;
#[cfg(feature = "v2020_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2020_4")))]
pub use self::constants::COMMIT_META_KEY_ARCHITECTURE;
#[cfg(feature = "v2018_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2018_6")))]
pub use self::constants::COMMIT_META_KEY_COLLECTION_BINDING;
#[cfg(feature = "v2017_7")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2017_7")))]
pub use self::constants::COMMIT_META_KEY_ENDOFLIFE;
#[cfg(feature = "v2017_7")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2017_7")))]
pub use self::constants::COMMIT_META_KEY_ENDOFLIFE_REBASE;
#[cfg(feature = "v2017_9")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2017_9")))]
pub use self::constants::COMMIT_META_KEY_REF_BINDING;
#[cfg(feature = "v2017_13")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2017_13")))]
pub use self::constants::COMMIT_META_KEY_SOURCE_TITLE;
#[cfg(feature = "v2014_9")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2014_9")))]
pub use self::constants::COMMIT_META_KEY_VERSION;
pub use self::constants::DIRMETA_GVARIANT_STRING;
pub use self::constants::FILEMETA_GVARIANT_STRING;
pub use self::constants::GPG_KEY_GVARIANT_STRING;
#[cfg(feature = "v2021_1")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2021_1")))]
pub use self::constants::METADATA_KEY_BOOTABLE;
#[cfg(feature = "v2021_1")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2021_1")))]
pub use self::constants::METADATA_KEY_LINUX;
#[cfg(feature = "v2018_9")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2018_9")))]
pub use self::constants::META_KEY_DEPLOY_COLLECTION_ID;
#[cfg(feature = "v2018_3")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2018_3")))]
pub use self::constants::ORIGIN_TRANSIENT_GROUP;
#[cfg(feature = "v2022_2")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2022_2")))]
pub use self::constants::PATH_BOOTED;
#[cfg(feature = "v2018_6")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2018_6")))]
pub use self::constants::REPO_METADATA_REF;
#[cfg(feature = "v2020_4")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2020_4")))]
pub use self::constants::SIGN_NAME_ED25519;
#[cfg(feature = "v2024_7")]
#[cfg_attr(docsrs, doc(cfg(feature = "v2024_7")))]
pub use self::constants::SIGN_NAME_SPKI;
pub use self::constants::SUMMARY_GVARIANT_STRING;
pub use self::constants::SUMMARY_SIG_GVARIANT_STRING;
pub use self::constants::TREE_GVARIANT_STRING;

pub(crate) mod traits {
    pub use super::blob_reader::BlobReaderExt;
    pub use super::repo_finder::RepoFinderExt;
    pub use super::sign::SignExt;
}
